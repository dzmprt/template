// <auto-generated />
using System;
using Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230917071339_InitAndFromFC")]
    partial class InitAndFromFC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserApplicationUserRole", b =>
                {
                    b.Property<int>("ApplicationUserRolesApplicationUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUsersApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationUserRolesApplicationUserRoleId", "ApplicationUsersApplicationUserId");

                    b.HasIndex("ApplicationUsersApplicationUserId");

                    b.ToTable("ApplicationUserApplicationUserRole");
                });

            modelBuilder.Entity("UM.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSingInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("UM.Domain.ApplicationUserRole", b =>
                {
                    b.Property<int>("ApplicationUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationUserRoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ApplicationUserRoleId");

                    b.ToTable("ApplicationUserRoles");
                });

            modelBuilder.Entity("VS.Domain.BlobFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlobFiles");
                });

            modelBuilder.Entity("VS.Domain.FC.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumNumberOfVotesInCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Started")
                        .HasColumnType("bit");

                    b.Property<string>("TestTicketKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("VS.Domain.FC.ContestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestCategory");
                });

            modelBuilder.Entity("VS.Domain.FC.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContestCategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("VS.Domain.FC.ParticipantImage", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("ImageId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ParticipantImages");
                });

            modelBuilder.Entity("VS.Domain.FC.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<bool>("CreatedByTestTiket")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("VS.Domain.FC.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PrizeNumber")
                        .HasColumnType("int");

                    b.Property<int>("VotesSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("VotesSetId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("VS.Domain.FC.VotesSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientUserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VotesSet");
                });

            modelBuilder.Entity("VS.Domain.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlobFileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlobFileId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ApplicationUserApplicationUserRole", b =>
                {
                    b.HasOne("UM.Domain.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserRolesApplicationUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UM.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VS.Domain.FC.Contest", b =>
                {
                    b.HasOne("UM.Domain.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VS.Domain.FC.ContestCategory", b =>
                {
                    b.HasOne("VS.Domain.FC.Contest", "Contest")
                        .WithMany("ContestCategories")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("VS.Domain.FC.Participant", b =>
                {
                    b.HasOne("VS.Domain.FC.ContestCategory", "ContestCategory")
                        .WithMany("Participants")
                        .HasForeignKey("ContestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VS.Domain.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("ContestCategory");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("VS.Domain.FC.ParticipantImage", b =>
                {
                    b.HasOne("VS.Domain.Image", "Image")
                        .WithMany("ParticipantImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VS.Domain.FC.Participant", "Participant")
                        .WithMany("ParticipantImages")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("VS.Domain.FC.Ticket", b =>
                {
                    b.HasOne("VS.Domain.FC.Contest", "Contest")
                        .WithMany("Tickets")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("VS.Domain.FC.Vote", b =>
                {
                    b.HasOne("VS.Domain.FC.Participant", "Participant")
                        .WithMany("Votes")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VS.Domain.FC.VotesSet", "VotesSet")
                        .WithMany("Votes")
                        .HasForeignKey("VotesSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("VotesSet");
                });

            modelBuilder.Entity("VS.Domain.Image", b =>
                {
                    b.HasOne("VS.Domain.BlobFile", "BlobFile")
                        .WithMany()
                        .HasForeignKey("BlobFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UM.Domain.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlobFile");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VS.Domain.FC.Contest", b =>
                {
                    b.Navigation("ContestCategories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("VS.Domain.FC.ContestCategory", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("VS.Domain.FC.Participant", b =>
                {
                    b.Navigation("ParticipantImages");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("VS.Domain.FC.VotesSet", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("VS.Domain.Image", b =>
                {
                    b.Navigation("ParticipantImages");
                });
#pragma warning restore 612, 618
        }
    }
}
